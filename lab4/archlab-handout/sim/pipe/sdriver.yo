                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 2023                 | 	rrmovq %rdx, %rbx
0x036: 30f90100000000000000 | 	irmovq $0x1, %r9    # const 1
0x040: 30fd0400000000000000 | 	irmovq $0x4, %r13   # const 2, stride
0x04a: 30fe0300000000000000 | 	irmovq $0x3, %r14   # const 1, stride - 1
0x054: 61e3                 | 	subq %r14, %rbx     # limit = len - stride + 1
0x056: 30fc0800000000000000 | 	irmovq $0x8, %r12   # const 8
0x060: 70eb00000000000000   | 	jmp Test
0x069:                      | Loop:
0x069: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x073: 200b                 | 	rrmovq %rax, %r11
0x075: 609b                 | 	addq %r9, %r11
0x077: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x081: 62aa                 | 	andq %r10, %r10
0x083: 26b0                 | 	cmovg %r11, %rax
0x085: 60c7                 | 	addq %r12, %rdi
0x087: 60c6                 | 	addq %r12, %rsi
0x089: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x093: 200b                 | 	rrmovq %rax, %r11
0x095: 609b                 | 	addq %r9, %r11
0x097: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0a1: 62aa                 | 	andq %r10, %r10
0x0a3: 26b0                 | 	cmovg %r11, %rax
0x0a5: 60c7                 | 	addq %r12, %rdi
0x0a7: 60c6                 | 	addq %r12, %rsi
                            | 
0x0a9: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x0b3: 200b                 | 	rrmovq %rax, %r11
0x0b5: 609b                 | 	addq %r9, %r11
0x0b7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0c1: 62aa                 | 	andq %r10, %r10
0x0c3: 26b0                 | 	cmovg %r11, %rax
0x0c5: 60c7                 | 	addq %r12, %rdi
0x0c7: 60c6                 | 	addq %r12, %rsi
0x0c9: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x0d3: 200b                 | 	rrmovq %rax, %r11
0x0d5: 609b                 | 	addq %r9, %r11
0x0d7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x0e1: 62aa                 | 	andq %r10, %r10
0x0e3: 26b0                 | 	cmovg %r11, %rax
0x0e5: 60c7                 | 	addq %r12, %rdi
0x0e7: 60c6                 | 	addq %r12, %rsi
0x0e9: 61d3                 | 	subq %r13, %rbx
0x0eb:                      | Test:
0x0eb: 6233                 | 	andq %rbx, %rbx
0x0ed: 766900000000000000   | 	jg Loop			# if so, goto Loop:
                            | 
0x0f6: 603e                 | 	addq %rbx, %r14
0x0f8: 62ee                 | 	andq %r14, %r14
0x0fa: 733001000000000000   | 	je Done
0x103:                      | Last:
0x103: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x10d: 200b                 | 	rrmovq %rax, %r11
0x10f: 609b                 | 	addq %r9, %r11
0x111: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x11b: 62aa                 | 	andq %r10, %r10
0x11d: 26b0                 | 	cmovg %r11, %rax
0x11f: 60c7                 | 	addq %r12, %rdi
0x121: 60c6                 | 	addq %r12, %rsi
0x123: 619e                 | 	subq %r9, %r14
0x125: 62ee                 | 	andq %r14, %r14
0x127: 760301000000000000   | 	jg Last
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x130:                      | Done:
0x130: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x131:                      | End:
                            | #/* $end ncopy-ys */
0x131:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x138:                      | 	.align 8
0x138:                      | src:
0x138: ffffffffffffffff     | 	.quad -1
0x140: 0200000000000000     | 	.quad 2
0x148: fdffffffffffffff     | 	.quad -3
0x150: 0400000000000000     | 	.quad 4
0x158: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x160:                      | 	.align 16
0x160:                      | Predest:
0x160: fadebc0000000000     | 	.quad 0xbcdefa
0x168:                      | dest:
0x168: abefcd0000000000     | 	.quad 0xcdefab
0x170: abefcd0000000000     | 	.quad 0xcdefab
0x178: abefcd0000000000     | 	.quad 0xcdefab
0x180: abefcd0000000000     | 	.quad 0xcdefab
0x188:                      | Postdest:
0x188: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x190:                      | .align 8
                            | # Run time stack
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
                            | 
0x210:                      | Stack:
