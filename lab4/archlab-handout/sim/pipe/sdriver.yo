                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f60803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2f9ffffffffffffff | 	iaddq $-7, %rdx     # 一個副作用，小於 7 的直接進入 Last
0x03e: 719701000000000000   | 	jle ForLessThan7
0x047: 708e01000000000000   | 	jmp Test
0x050:                      | Loop:
0x050: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x05a: 200b                 | 	rrmovq %rax, %r11
0x05c: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x066: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x070: 62aa                 | 	andq %r10, %r10
0x072: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x074: 50a70800000000000000 | 	mrmovq 0x8(%rdi), %r10
0x07e: 200b                 | 	rrmovq %rax, %r11
0x080: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x08a: 40a60800000000000000 | 	rmmovq %r10, 0x8(%rsi)
0x094: 62aa                 | 	andq %r10, %r10
0x096: 26b0                 | 	cmovg %r11, %rax
                            | 
0x098: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x0a2: 200b                 | 	rrmovq %rax, %r11
0x0a4: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x0ae: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x0b8: 62aa                 | 	andq %r10, %r10
0x0ba: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x0bc: 50a71800000000000000 | 	mrmovq 0x18(%rdi), %r10
0x0c6: 200b                 | 	rrmovq %rax, %r11
0x0c8: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x0d2: 40a61800000000000000 | 	rmmovq %r10, 0x18(%rsi)
0x0dc: 62aa                 | 	andq %r10, %r10
0x0de: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x0e0: 50a72000000000000000 | 	mrmovq 0x20(%rdi), %r10
0x0ea: 200b                 | 	rrmovq %rax, %r11
0x0ec: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x0f6: 40a62000000000000000 | 	rmmovq %r10, 0x20(%rsi)
0x100: 62aa                 | 	andq %r10, %r10
0x102: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x104: 50a72800000000000000 | 	mrmovq 0x28(%rdi), %r10
0x10e: 200b                 | 	rrmovq %rax, %r11
0x110: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x11a: 40a62800000000000000 | 	rmmovq %r10, 0x28(%rsi)
0x124: 62aa                 | 	andq %r10, %r10
0x126: 26b0                 | 	cmovg %r11, %rax
                            | 
0x128: 50a73000000000000000 | 	mrmovq 0x30(%rdi), %r10
0x132: 200b                 | 	rrmovq %rax, %r11
0x134: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x13e: 40a63000000000000000 | 	rmmovq %r10, 0x30(%rsi)
0x148: 62aa                 | 	andq %r10, %r10
0x14a: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x14c: 50a73800000000000000 | 	mrmovq 0x38(%rdi), %r10
0x156: 200b                 | 	rrmovq %rax, %r11
0x158: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x162: 40a63800000000000000 | 	rmmovq %r10, 0x38(%rsi)
0x16c: 62aa                 | 	andq %r10, %r10
0x16e: 26b0                 | 	cmovg %r11, %rax
0x170: c0f74000000000000000 | 	iaddq $0x40, %rdi
0x17a: c0f64000000000000000 | 	iaddq $0x40, %rsi
                            | 	
0x184: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x18e:                      | Test:
0x18e: 765000000000000000   | 	jg Loop			# if so, goto Loop:
0x197:                      | ForLessThan7:
0x197: c0f20300000000000000 | 	iaddq $0x3, %rdx
0x1a1: 751a02000000000000   | 	jge Last
0x1aa: c0f20400000000000000 | 	iaddq $0x4, %rdx
0x1b4: 74c601000000000000   | 	jne Fin
0x1bd: 70c902000000000000   | 	jmp Done
0x1c6:                      | Fin:
0x1c6: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x1d0: 200b                 | 	rrmovq %rax, %r11
0x1d2: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x1dc: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x1e6: 62aa                 | 	andq %r10, %r10
0x1e8: 26b0                 | 	cmovg %r11, %rax
0x1ea: c0f70800000000000000 | 	iaddq $0x8, %rdi
0x1f4: c0f60800000000000000 | 	iaddq $0x8, %rsi
0x1fe: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x208: 76c601000000000000   | 	jg Fin
0x211: 70c902000000000000   | 	jmp Done
0x21a:                      | Last:
                            | 	
0x21a: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x224: 200b                 | 	rrmovq %rax, %r11
0x226: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x230: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x23a: 62aa                 | 	andq %r10, %r10
0x23c: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x23e: 50a70800000000000000 | 	mrmovq 0x8(%rdi), %r10
0x248: 200b                 | 	rrmovq %rax, %r11
0x24a: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x254: 40a60800000000000000 | 	rmmovq %r10, 0x8(%rsi)
0x25e: 62aa                 | 	andq %r10, %r10
0x260: 26b0                 | 	cmovg %r11, %rax
                            | 
0x262: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x26c: 200b                 | 	rrmovq %rax, %r11
0x26e: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x278: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x282: 62aa                 | 	andq %r10, %r10
0x284: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x286: 50a71800000000000000 | 	mrmovq 0x18(%rdi), %r10
0x290: 200b                 | 	rrmovq %rax, %r11
0x292: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x29c: 40a61800000000000000 | 	rmmovq %r10, 0x18(%rsi)
0x2a6: 62aa                 | 	andq %r10, %r10
0x2a8: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x2aa: c0f72000000000000000 | 	iaddq $0x20, %rdi
0x2b4: c0f62000000000000000 | 	iaddq $0x20, %rsi
0x2be: 6222                 | 	andq %rdx, %rdx
0x2c0: 76c601000000000000   | 	jg Fin
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2c9:                      | Done:
0x2c9: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2ca:                      | End:
                            | #/* $end ncopy-ys */
0x2ca:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2d0:                      | 	.align 8
0x2d0:                      | src:
0x2d0: 0100000000000000     | 	.quad 1
0x2d8: feffffffffffffff     | 	.quad -2
0x2e0: 0300000000000000     | 	.quad 3
0x2e8: fcffffffffffffff     | 	.quad -4
0x2f0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x300:                      | 	.align 16
0x300:                      | Predest:
0x300: fadebc0000000000     | 	.quad 0xbcdefa
0x308:                      | dest:
0x308: abefcd0000000000     | 	.quad 0xcdefab
0x310: abefcd0000000000     | 	.quad 0xcdefab
0x318: abefcd0000000000     | 	.quad 0xcdefab
0x320: abefcd0000000000     | 	.quad 0xcdefab
0x328:                      | Postdest:
0x328: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x330:                      | .align 8
                            | # Run time stack
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
                            | 
0x3b0:                      | Stack:
