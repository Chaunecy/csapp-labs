                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f69801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f76801000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2fdffffffffffffff | 	iaddq $-3, %rdx     # limit = len - stride + 1
0x03e: 70f500000000000000   | 	jmp Test
0x047:                      | Loop:
0x047: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x051: 200b                 | 	rrmovq %rax, %r11
0x053: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x05d: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x067: 62aa                 | 	andq %r10, %r10
0x069: 26b0                 | 	cmovg %r11, %rax
                            | 	# iaddq $0x8, %rdi
                            | 	# iaddq $0x8, %rsi
                            | 	
0x06b: 50a70800000000000000 | 	mrmovq 0x8(%rdi), %r10
0x075: 200b                 | 	rrmovq %rax, %r11
0x077: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x081: 40a60800000000000000 | 	rmmovq %r10, 0x8(%rsi)
0x08b: 62aa                 | 	andq %r10, %r10
0x08d: 26b0                 | 	cmovg %r11, %rax
                            | 	# iaddq $0x8, %rdi
                            | 	# iaddq $0x8, %rsi
                            | 
0x08f: 50a71000000000000000 | 	mrmovq 0x10(%rdi), %r10
0x099: 200b                 | 	rrmovq %rax, %r11
0x09b: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x0a5: 40a61000000000000000 | 	rmmovq %r10, 0x10(%rsi)
0x0af: 62aa                 | 	andq %r10, %r10
0x0b1: 26b0                 | 	cmovg %r11, %rax
                            | 	# iaddq $0x8, %rdi
                            | 	# iaddq $0x8, %rsi
                            | 	
0x0b3: 50a71800000000000000 | 	mrmovq 0x18(%rdi), %r10
0x0bd: 200b                 | 	rrmovq %rax, %r11
0x0bf: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x0c9: 40a61800000000000000 | 	rmmovq %r10, 0x18(%rsi)
0x0d3: 62aa                 | 	andq %r10, %r10
0x0d5: 26b0                 | 	cmovg %r11, %rax
                            | 	
0x0d7: c0f72000000000000000 | 	iaddq $0x20, %rdi
0x0e1: c0f62000000000000000 | 	iaddq $0x20, %rsi
                            | 	
0x0eb: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x0f5:                      | Test:
0x0f5: 764700000000000000   | 	jg Loop			# if so, goto Loop:
                            | 
0x0fe: c0f20300000000000000 | 	iaddq $0x3, %rdx
0x108: 741a01000000000000   | 	jne Last
0x111: 706501000000000000   | 	jmp Done
0x11a:                      | Last:
0x11a: 50a70000000000000000 | 	mrmovq (%rdi), %r10
0x124: 200b                 | 	rrmovq %rax, %r11
0x126: c0fb0100000000000000 | 	iaddq $0x1, %r11
0x130: 40a60000000000000000 | 	rmmovq %r10, (%rsi)
0x13a: 62aa                 | 	andq %r10, %r10
0x13c: 26b0                 | 	cmovg %r11, %rax
0x13e: c0f70800000000000000 | 	iaddq $0x8, %rdi
0x148: c0f60800000000000000 | 	iaddq $0x8, %rsi
0x152: c0f2ffffffffffffffff | 	iaddq $-1, %rdx
0x15c: 761a01000000000000   | 	jg Last
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x165:                      | Done:
0x165: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x166:                      | End:
                            | #/* $end ncopy-ys */
0x166:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x168:                      | 	.align 8
0x168:                      | src:
0x168: 0100000000000000     | 	.quad 1
0x170: feffffffffffffff     | 	.quad -2
0x178: fdffffffffffffff     | 	.quad -3
0x180: 0400000000000000     | 	.quad 4
0x188: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x190:                      | 	.align 16
0x190:                      | Predest:
0x190: fadebc0000000000     | 	.quad 0xbcdefa
0x198:                      | dest:
0x198: abefcd0000000000     | 	.quad 0xcdefab
0x1a0: abefcd0000000000     | 	.quad 0xcdefab
0x1a8: abefcd0000000000     | 	.quad 0xcdefab
0x1b0: abefcd0000000000     | 	.quad 0xcdefab
0x1b8:                      | Postdest:
0x1b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x1c0:                      | .align 8
                            | # Run time stack
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
0x210: 0000000000000000     | 	.quad 0
0x218: 0000000000000000     | 	.quad 0
0x220: 0000000000000000     | 	.quad 0
0x228: 0000000000000000     | 	.quad 0
0x230: 0000000000000000     | 	.quad 0
0x238: 0000000000000000     | 	.quad 0
                            | 
0x240:                      | Stack:
